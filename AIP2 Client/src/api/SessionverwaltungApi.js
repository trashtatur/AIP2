/**
 * Security Guard Accounts
 * RESTful API f√ºr AIP2
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import InlineResponse2001 from '../model/InlineResponse2001';

/**
* Sessionverwaltung service.
* @module api/SessionverwaltungApi
* @version 1.0.0
*/
export default class SessionverwaltungApi {

    /**
    * Constructs a new SessionverwaltungApi. 
    * @alias module:api/SessionverwaltungApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the loginPost operation.
     * @callback module:api/SessionverwaltungApi~loginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loggt einen User ein
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Email-Adresse des Nutzers
     * @param {String} opts.password Passwort des Nutzers
     * @param {module:api/SessionverwaltungApi~loginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    loginPost(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'email': opts['email'],
        'password': opts['password']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutPost operation.
     * @callback module:api/SessionverwaltungApi~logoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Session beenden, Session-Token invalidieren
     * @param {Object} opts Optional parameters
     * @param {String} opts.sessionToken Session-Token erstellt von der Login-Schnittstelle
     * @param {module:api/SessionverwaltungApi~logoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logoutPost(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'sessionToken': opts['sessionToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the profileGet operation.
     * @callback module:api/SessionverwaltungApi~profileGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account-Daten des eigenen Accounts abrufen
     * @param {Object} opts Optional parameters
     * @param {String} opts.sessionToken Session-Token erstellt von der Login-Schnittstelle
     * @param {module:api/SessionverwaltungApi~profileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    profileGet(opts, callback) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'sessionToken': opts['sessionToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Account;

      return this.apiClient.callApi(
        '/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
