/**
 * Security Guard Accounts
 * RESTful API für AIP2
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import InlineResponse200 from '../model/InlineResponse200';

/**
* Accountverwaltung service.
* @module api/AccountverwaltungApi
* @version 1.0.0
*/
export default class AccountverwaltungApi {

    /**
    * Constructs a new AccountverwaltungApi. 
    * @alias module:api/AccountverwaltungApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminAccountIdDelete operation.
     * @callback module:api/AccountverwaltungApi~adminAccountIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Löscht einen Account
     * @param {String} id Id des Accounts der abgerufen werden soll
     * @param {module:api/AccountverwaltungApi~adminAccountIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminAccountIdDelete(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminAccountIdDelete");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/admin/account/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the adminAccountIdGet operation.
     * @callback module:api/AccountverwaltungApi~adminAccountIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Account-Daten eines beliebigen Accounts abrufen
     * @param {String} id Id des Accounts der abgerufen werden soll
     * @param {module:api/AccountverwaltungApi~adminAccountIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    adminAccountIdGet(id, callback) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminAccountIdGet");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = Account;

      return this.apiClient.callApi(
        '/admin/account/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the adminAccountIdPost operation.
     * @callback module:api/AccountverwaltungApi~adminAccountIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Daten eines Users ändern
     * @param {String} id Id des Accounts der abgerufen werden soll
     * @param {module:model/Account} account Neue Daten des Accounts (ohne id und mit unverschlüsseltem Passwort)
     * @param {module:api/AccountverwaltungApi~adminAccountIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminAccountIdPost(id, account, callback) {
      let postBody = account;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling adminAccountIdPost");
      }

      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling adminAccountIdPost");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/admin/account/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the adminAccountPut operation.
     * @callback module:api/AccountverwaltungApi~adminAccountPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Account} account Daten des Accounts, der angelegt werden soll (ohne id und mit unverschlüsseltem Passwort)
     * @param {module:api/AccountverwaltungApi~adminAccountPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    adminAccountPut(account, callback) {
      let postBody = account;

      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling adminAccountPut");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/admin/account', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
